\documentclass{article}

\usepackage[margin=.5in]{geometry}
\usepackage[section]{placeins}  %% keeps output from floating into adjoining sections
\usepackage{setspace} %for Hmisc::describe
\usepackage{relsize}  %for Hmisc::describe
\usepackage{fixltx2e}
\usepackage{booktabs} % for table formatting
\usepackage{longtable}

\begin{document}

<<setup, echo=FALSE , message=FALSE>>=
opts_chunk$set( echo=FALSE, 
               fig.align='center',
               message=FALSE, comment="", tidy=TRUE, results='asis',warnings=FALSE)
library(xtable)
library(plyr)
library(reshape)
require(survival)
require(ggplot2)
require(scales)
@

\title{{\bf Chapter 2 - Countries of Birth and Non-immigrant Visa Types}\\
Applicants for Status Adjustment in the US\\
USCIS Data}
\date{\today}
\maketitle

\newpage
\tableofcontents           
\listoftables
\listoffigures

\newpage
<<'load data'>>=
load("C:/Users/wau4/Desktop/uscis/uscis/ni.Rda")
@

The non-immigrant dataset after going though data cleaning and after excluding refugees, has \Sexpr{nrow(ni)} records, and Table 1 shows this number stratified by immigration status.

<<'INS status - collapse'>>=
require(plyr)
require(xtable)
df <- ddply(ni, .(insstatus), function(x) c(count=nrow(x)))
df <- rename(df, c(insstatus="Immigration Status", count="Number"))
df$Percent <- 100* df$Number/sum(df$Number)
df <- df[order(-df$Number),]
@

<<'INS status table'>>=
print(xtable(df, caption="Immigration status of applicants for status adjustment between 1999-2011", digits=c(0,0,0,2)), include.rownames=FALSE)
@

\section{Countries of birth and geographical regions}
<<'count country of birth'>>=
cobcount <- as.data.frame(table(ni$COB))
@
There are \Sexpr{nrow(cobcount)} countries represented in the non-immigrants dataset (countries entered with name variations).  


<<'COB and regions'>>=
#To identify and subset the most common countries of birth (>=20,000)
####Obtain frequency of countries of birth
#generate a table collapsed by COB and will give number of obs per country
cobfreq <- as.data.frame(table(ni$COB))
#order countries by frequency (freq)
cobfreq <- cobfreq[order(-cobfreq$Freq),]
#Identify countries with >20000 individuals applying for status adj over last 10 years
cobfreq1 <- subset(cobfreq, Freq > 20000, select=c(Var1, Freq))

##Go back to the original ni dataframe and subset it to the countries identified above
##fixing country names
ni$COB[ni$COB == "KOREA"] <- "SKORE" #replacing Korea with skore (i.e. skorea)
ni$COB[ni$COB == "USSR"] <- "RUSSI" #replacing USSR with Russi (i.e. Russia)
ni$COB[ni$COB == "TAIWA"] <- "CHINA" #Counting Taiwan in China
#Recategorizing COB in the ni dataframe to classify countries with <20000 applicants as NA, which will be excluded in the next step 
ni <- within(ni, {
  cobcat <- as.factor(ni$COB)
  cobcat[COB!="MEXIC" & COB!="CHINA" & COB!="INDIA" & COB!="CUBA" & COB!="PHILI" & COB!="COLOM" & COB!="SKORE" 
         & COB!="CANAD" & COB!="BRAZI" & COB!="HAITI" & COB!="PERU" & COB!="UK" & COB!="JAMAI" & COB!="DR"
         & COB!="VENEZ" & COB!="PAKIS" & COB!="ELSAL" & COB!="VIETN" & COB!="POLAN" & COB!="GUATE" & COB!="ECUAD"
         & COB!="ARGEN" & COB!="GERMA" & COB!="UKRAI" & COB!="NIGIA" & COB!="JAPAN" 
         & COB!="TRINI" & COB!="ETHIO" & COB!="ISRAE" & COB!="RUSSI" & COB!="GHANA" & COB!="THAIL" & COB!="IRAN"
         & COB!="ROMAN" & COB!="HONDU" & COB!="FRANC" & COB!="KENYA"] <- NA
})


#Classify countries by TB burden - WHO classification
#creating two datasets 1) with countries with >=20,000 applicants for status adjustment and
#2) with countries <20,000
ni.main <- subset(ni, cobcat!="NA", drop=TRUE)
ni.main$COB <- factor(ni.main$COB)
ni.main$cobcat <- factor(ni.main$cobcat)

ni.other <- subset(ni, cobcat=="NA", drop=TRUE)
ni.other$COB <- factor(ni.other$COB)
ni.other$cobcat <- factor(ni.other$cobcat)

#value labels
ni.main <- ni.main
levels(ni.main$COB)[levels(ni.main$COB)=="MEXIC"] <- "Mexico"
levels(ni.main$COB)[levels(ni.main$COB)=="CHINA"] <- "China"
levels(ni.main$COB)[levels(ni.main$COB)=="INDIA"] <- "India"
levels(ni.main$COB)[levels(ni.main$COB)=="CUBA"] <- "Cuba"
levels(ni.main$COB)[levels(ni.main$COB)=="PHILI"] <- "Philippines"
levels(ni.main$COB)[levels(ni.main$COB)=="COLOM"] <- "Colombia"
levels(ni.main$COB)[levels(ni.main$COB)=="SKORE"] <- "S Korea"
levels(ni.main$COB)[levels(ni.main$COB)=="CANAD"] <- "Canada"
levels(ni.main$COB)[levels(ni.main$COB)=="BRAZI"] <- "Brazil"
levels(ni.main$COB)[levels(ni.main$COB)=="HAITI"] <- "Haiti"
levels(ni.main$COB)[levels(ni.main$COB)=="PERU"] <- "Peru"
levels(ni.main$COB)[levels(ni.main$COB)=="UK"] <- "UK"
levels(ni.main$COB)[levels(ni.main$COB)=="JAMAI"] <- "Jamaica"
levels(ni.main$COB)[levels(ni.main$COB)=="DR"] <- "Dom Republic"
levels(ni.main$COB)[levels(ni.main$COB)=="VENEZ"] <- "Venezuela"
levels(ni.main$COB)[levels(ni.main$COB)=="PAKIS"] <- "Pakistan"
levels(ni.main$COB)[levels(ni.main$COB)=="ELSAL"] <- "El Salvador"
levels(ni.main$COB)[levels(ni.main$COB)=="VIETN"] <- "Viet Nam"
levels(ni.main$COB)[levels(ni.main$COB)=="POLAN"] <- "Poland"
levels(ni.main$COB)[levels(ni.main$COB)=="GUATE"] <- "Guatemala"
levels(ni.main$COB)[levels(ni.main$COB)=="ECUAD"] <- "Ecuador"
levels(ni.main$COB)[levels(ni.main$COB)=="ARGEN"] <- "Argentina"
levels(ni.main$COB)[levels(ni.main$COB)=="GERMA"] <- "Germany"
levels(ni.main$COB)[levels(ni.main$COB)=="UKRAI"] <- "Ukraine"
levels(ni.main$COB)[levels(ni.main$COB)=="NIGIA"] <- "Nigeria"
levels(ni.main$COB)[levels(ni.main$COB)=="JAPAN"] <- "Japan"
levels(ni.main$COB)[levels(ni.main$COB)=="TRINI"] <- "Trinidad"
levels(ni.main$COB)[levels(ni.main$COB)=="ETHIO"] <- "Ethiopia"
levels(ni.main$COB)[levels(ni.main$COB)=="ISRAE"] <- "Israel"
levels(ni.main$COB)[levels(ni.main$COB)=="RUSSI"] <- "Russia"
levels(ni.main$COB)[levels(ni.main$COB)=="GHANA"] <- "Ghana"
levels(ni.main$COB)[levels(ni.main$COB)=="THAIL"] <- "Thailand"
levels(ni.main$COB)[levels(ni.main$COB)=="IRAN"] <- "Iran"
levels(ni.main$COB)[levels(ni.main$COB)=="ROMAN"] <- "Romania"
levels(ni.main$COB)[levels(ni.main$COB)=="HONDU"] <- "Honduras"
levels(ni.main$COB)[levels(ni.main$COB)=="FRANC"] <- "France"
levels(ni.main$COB)[levels(ni.main$COB)=="KENYA"] <- "Kenya"

#Generating regions
ni.main <- within(ni.main, {
  region <- NA
  region[COB=="China" | COB=="India" | COB=="Philippines" | COB=="S Korea" | COB=="Pakistan" | COB=="Viet Nam" | COB=="Japan" | COB=="Taiwan" | COB=="Thailand" | COB=="Iran"] <- "Asia"
  region[COB=="Mexico" | COB=="Colombia" | COB=="Brazil" | COB=="Peru" | COB=="Venezuela" | COB=="El Salvador" | COB=="Guatemala" | COB=="Ecuador" | COB=="Argentina" | COB=="Honduras" | COB=="Canada"] <- "Americas"
  region[COB=="UK" | COB=="Poland" | COB=="Germany" | COB=="Ukraine" | COB=="Israel" | COB=="Russia" | COB=="Romania" | COB=="France"] <- "Europe"
  region[COB=="Nigeria" | COB=="Ethiopia" | COB=="Ghana" | COB=="Kenya"] <- "Africa"
  region[COB=="Cuba" | COB=="Haiti" | COB=="Jamaica" | COB=="Dom Republic" | COB=="Trinidad"] <- "Carribean"
})
#Note: Israel classified under Europe
@

%The following 4 chunks are for generating a table with number of applicants by COB, stratified by non-immigrants, asylee or parolee status.

<<'COB collapse',cache=TRUE>>=
#check if all countries have been assigned a region
require(doBy)
collapse2 <- summaryBy(COB ~ region + COB, FUN=length, data=ni.main)
require(reshape)
collapse1 <- rename(collapse2, c(region="Region", COB="BirthCountry", COB.length="Number"))
collapse1$Percent <- 100* collapse1$Number/sum(collapse1$Number)
collapse1 <- collapse1[order(-collapse1$Number),]
collapse1$cumsum <- cumsum(collapse1$Number)
collapse1$cumPercent <- 100* collapse1$cumsum/sum(collapse1$Number)
collapse1 <- rename(collapse1, c(cumsum="Cumulative total", cumPercent="Cumulative percent"))
@

<<'nonimmigrants',cache=TRUE>>=
nonimmigrants <- subset(ni.main, insstatus=="Non-immigrants", drop=TRUE)
nonimmigrants$insstatus <- factor(nonimmigrants$insstatus)
df.ni <- ddply(nonimmigrants, .(COB), function(x) c(count=nrow(x)))
df.ni <- rename(df.ni, c(COB="BirthCountry", count="ni"))
#df.ni$Percent <- 100* df.ni$Number/sum(df.ni$Number)
#df.ni <- df.ni[order(-df.ni$Number),]
@

<<'asylees',cache=TRUE>>=
asylees <- subset(ni.main, insstatus=="Asylees", drop=TRUE)
asylees$insstatus <- factor(asylees$insstatus)
df.asylees <- ddply(asylees, .(COB), function(x) c(count=nrow(x)))
df.asylees <- rename(df.asylees, c(COB="BirthCountry", count="asylees"))
#df.asylees$Percent <- 100* df.asylees$Number/sum(df.asylees$Number)
#df.asylees <- df.asylees[order(-df.asylees$Number),]
@

<<'parolees',cache=TRUE>>=
parolees <- subset(ni.main, insstatus=="Parolees", drop=TRUE)
parolees$insstatus <- factor(parolees$insstatus)
df.parolees <- ddply(parolees, .(COB), function(x) c(count=nrow(x)))
df.parolees <- rename(df.parolees, c(COB="BirthCountry", count="parolees"))
#df.parolees$Percent <- 100* df.parolees$Number/sum(df.parolees$Number)
#df.parolees <- df.parolees[order(-df.parolees$Number),]
@

%Merging the above 4 data.frames

<<'immigration status2'>>=
total <- merge(collapse1, df.ni, by="BirthCountry")
total2 <- merge(total, df.asylees, by="BirthCountry")
total3 <- merge(total2, df.parolees, by="BirthCountry")
total3 <- total3[order(-total3$Number),]
total3 <- rename(total3, c(ni="Non-immigrants", asylees="Asylees", parolees="Parolees"))
@

Table 2 presents a list of countries with $\geq$20,000 status adjustment applicants between 1999-2011, by geographical region.  
<<'Regions and country of birth-table'>>=
cols.comma = c(3,5,7,8,9)  # identify columns that need commas for thousands
total3[, cols.comma] = prettyNum( total3[, cols.comma], big.mark=",", drop0trailing = TRUE)
x.rescale <- xtable(total3,label='tabrescaled',caption="Countries of birth with 20,000 or more status adjusters between 1999-2011, by geographical region. The number of status adjusters has been stratified by immigration status", digits=c(0,0,0,0,2,0,2,0,0,0), align=c('l', 'l', 'l','r','r','r','r','r', 'r', 'r'))
print(x.rescale, scalebox=.8, include.rownames=FALSE)
@
\FloatBarrier

\newpage
Graphical representation of Table 2...
<<'countries of birth-plot',fig.height=6, fig.width=8, fig.align='center',fig.cap="Country of birth of non-immigrant applicants for status adjustment">>=
#Aggregate over COB (country of birth) and tbburden (3 categories of TB incidence (<20, 20-100, >100/100,000) )
aggdata <- aggregate(ni.main, by=list(ni.main$COB), FUN=length)
keepvars <- names(aggdata) %in% c("Group.1", "Group.2", "COB")
aggdata <- aggdata[keepvars]
###Rename variables
require(reshape)
aggdata <- rename(aggdata, c(Group.1="cob", COB="Freq"))
#Plotting bargraphs
require(ggplot2)
require(scales)

###Code to make the graph look ordered by frequency and not alphabetical order of country of birth (cob)
cob_order <- transform(aggdata, cob=reorder(cob, Freq)) #Countries appreas from low to high frequency
cob_order <- transform(collapse2, COB=reorder(COB, COB.length))
#this plot will contain cob on x-axis
p <- ggplot(data=cob_order, aes(x=COB, y=COB.length)) + geom_bar(colour="grey", width=.8) + 
  xlab("Country of birth") + ylab("Frequency") 

#this plot will flip the axes and show cob on y-axis (easier to read)
p + geom_bar() + coord_flip() + scale_y_continuous(labels=comma, breaks=c(20000, 100000, 200000, 300000, 400000, 500000, 600000))
@
\FloatBarrier

\newpage
\section{Visa types}
<<'count non-immigrant visa types'>>=
visacount <- as.data.frame(table(droplevels(ni.main$visatype)))
visacount$Var1 <- as.factor(visacount$Var1)
@

Of the total \Sexpr{nlevels(visacount$Var1)} non-immigrant visa types represented in this dataset, a list of visatypes with $\geq$26,500 applicants for status adjustment between 1999-2011 is shown in Table 3.

<<'Visa types'>>=
#Most common visa types
#This takes the table command and converts the output into a dataframe which can then be analyzed
visacollapse <- as.data.frame(table(droplevels(ni.main)$visatype)) #use drop levels here because of the NAs that were dropped while creating the ni.main dataframe

visacollapse <- visacollapse[order(-visacollapse$Freq),] #order the freq of visatypes from high to low

#Renaming this visa type; L1A seems to be the same as L1 (inter-company exchange) (http://travel.state.gov/visa/temp/types/types_1286.html)
visacollapse$Var1[visacollapse$Var1 == "L1A"] <- "L1"

visa.25 <- visacollapse[visacollapse$Freq > 26500,] #Restricting
require(reshape)
visa.25 <- rename(visa.25, c(Var1="visa"))

#Renaming this visa type; L1A seems to be the same as L1 (inter-company exchange) (http://travel.state.gov/visa/temp/types/types_1286.html)
ni.main$visatype[ni.main$visatype == "L1A"] <- "L1"

#Recategorizing visa types; those with >26000 status adjusters will be kept as is and the rest will be classified as NA (missing) 
ni.main <- within(ni.main, {
  visacat <- as.factor(ni.main$visatype)
  visacat[visatype!="B2" & visatype!="AS" & visatype!="H1B" & visatype!="EWI" & visatype!="H4" & visatype!="PR" 
          & visatype!="K1" & visatype!="F1" & visatype!="L2" & visatype!="L1"
          & visatype!="WT" & visatype!="K3" & visatype!="B1" & visatype!="CP" & visatype!="J1"] <- NA
})
ni.main$visacat <- as.factor(ni.main$visacat)
#value labels
ni.main <- ni.main
levels(ni.main$visacat)[levels(ni.main$visacat)=="B2"] <- "Tourists (B2)"
levels(ni.main$visacat)[levels(ni.main$visacat)=="AS"] <- "Asylees (AS)"
levels(ni.main$visacat)[levels(ni.main$visacat)=="H1B"] <- "Speciality occupations (H1B)"
levels(ni.main$visacat)[levels(ni.main$visacat)=="EWI"] <- "Entry without Inspection (EWI)"
levels(ni.main$visacat)[levels(ni.main$visacat)=="H4"] <- "Dependents of H1B (H4)"
levels(ni.main$visacat)[levels(ni.main$visacat)=="PR"] <- "Parolees (PR)"
levels(ni.main$visacat)[levels(ni.main$visacat)=="K1"] <- "Foreign citizen fiance of US citizen (K1)"
levels(ni.main$visacat)[levels(ni.main$visacat)=="F1"] <- "Students (F1)"
levels(ni.main$visacat)[levels(ni.main$visacat)=="L2"] <- "Dependents of L1 (L2)"
levels(ni.main$visacat)[levels(ni.main$visacat)=="L1"] <- "Intra-company transferees (L1)"
levels(ni.main$visacat)[levels(ni.main$visacat)=="WT"] <- "Visa waiver program - Temporary visitors (WT)"
levels(ni.main$visacat)[levels(ni.main$visacat)=="K3"] <- "Spouse of US citizen (K3)"
levels(ni.main$visacat)[levels(ni.main$visacat)=="B1"] <- "Temporary visitors for business (B1)"
levels(ni.main$visacat)[levels(ni.main$visacat)=="CP"] <- "Family-based parole (CP)"
levels(ni.main$visacat)[levels(ni.main$visacat)=="J1"] <- "Exchange visitors (J1)"

visacat <- as.data.frame(table(droplevels(ni.main$visacat)))
visacat <- visacat[order(-visacat$Freq),]
visacat <- rename(visacat, c(Var1="Visa type", Freq="Number"))
visacat$Percent <- 100* visacat$Number/sum(visacat$Number)
@

<<'Visa type table'>>=
cols.comma = c(2)  # identify columns that need commas for thousands
visacat[, cols.comma] = prettyNum( visacat[, cols.comma], big.mark=",", drop0trailing = TRUE)
print(xtable(visacat, caption="Visa types with >=26,500 status adjusters between 1999-2011", digits=c(0,0,0,2), align=c('l', 'l', 'r','r')), include.rownames=FALSE)
@

And the same is represented graphically in Figure 2...

<<'visa types', fig.align='center',fig.height=4,fig.width=8,fig.cap="Visa types of non-immigrant applicants for status adjustment">>=
#Most common visa types
require(ggplot2)
require(reshape)
library(scales)
visacollapse <- as.data.frame(table(droplevels(ni.main)$visacat)) #This takes the table command and converts the output into a dataframe which can then be analyzed
visacollapse <- visacollapse[order(-visacollapse$Freq),] #order the freq of visatypes from high to low
visacollapse <- rename(visacollapse, c(Var1="visa"))

###Pre-graphing code for ordering the visa types by frequency and not their numeric code 
visacollapse_reorder <- transform(visacollapse, visa=reorder(visa, Freq)) #makes graph appear with visa types from low to high freq

###This keep the visa type on the x-axis
pvisatype <- ggplot(data=visacollapse_reorder, aes(x=visa, y=Freq)) + geom_bar(colour="grey", width=.8) + 
  xlab("Visa Type") + ylab("Frequency") 

###This flips the coordinates (coord_flip) 
pvisatype + geom_bar() + coord_flip() + scale_y_continuous(labels=comma, breaks=c(25000, 100000, 200000, 300000, 400000, 500000, 600000, 700000))
@
\FloatBarrier

\newpage
\subsection{Yecai's visa classification}
The non-immigrant visa types were further categorized by broad definitions developed by Yecai for his PLoS One paper.  Table 4 shows this applicants according to this classification.

<<'Yecai visa classification'>>=
#Recategorize visa types - using Yecai's classification

ni.main <- within(ni.main, {
  visacat.yecai <- NA
  visacat.yecai[visatype=="F1" | visatype=="F2" | visatype=="J1" | visatype=="J2" | visatype=="M1" | visatype=="M2"
                | visatype=="E1" | visatype=="E2" | visatype=='E3' | visatype=="H1B" | visatype=="H1C" | visatype=="H2A"
                | visatype=="H2B" | visatype=="H2R" | visatype=="H3" | visatype=="H4" | visatype=="L1" | visatype=="L2"
                | visatype=="O1" | visatype=="O2" | visatype=="O3" | visatype=="P1" | visatype=="P2" | visatype=="P3"
                | visatype=="P4" | visatype=="Q1" | visatype=="R1" | visatype=="R2" | visatype=="TD" | visatype=="TN"] <- "1"
  visacat.yecai[visatype=="B1" | visatype=="B2" | visatype=="GB" | visatype=="GT" | visatype=="WB" | visatype=="WT"] <- "2"
  visacat.yecai[visatype=="A1" | visatype=="A2" | visatype=="A3" | visatype=="G1" | visatype=="G2" | visatype=="G3" | visatype=="G4"
                | visatype=="G5" | visatype=="N1" | visatype=="N2" | visatype=="N3" | visatype=="N4" | visatype=="N5" | visatype=="N6"
                | visatype=="N7"] <- "3"
  visacat.yecai[visatype=="AS" | visatype=="PR"] <- "4"
  visacat.yecai[visatype=="EWI"] <- "5"
})

ni.main$visacat.yecai <- as.factor(ni.main$visacat.yecai)

#Value labels
ni.main <- ni.main
levels(ni.main$visacat.yecai)[levels(ni.main$visacat.yecai)=="1"] <- "Students, exchange visitors, temp workers & families"
levels(ni.main$visacat.yecai)[levels(ni.main$visacat.yecai)=="2"] <- "Tourists and business travelers"
levels(ni.main$visacat.yecai)[levels(ni.main$visacat.yecai)=="3"] <- "Diplomats and families"
levels(ni.main$visacat.yecai)[levels(ni.main$visacat.yecai)=="4"] <- "Asylees and parolees"
levels(ni.main$visacat.yecai)[levels(ni.main$visacat.yecai)=="5"] <- "Entry without inspection"

visacat.yecai <- as.data.frame(table(droplevels(ni.main$visacat.yecai)))
visacat.yecai <- rename(visacat.yecai, c(Var1="Visa type", Freq="Number"))
visacat.yecai$Percent <- 100* visacat.yecai$Number/sum(visacat.yecai$Number)
visacat.yecai <- visacat.yecai[order(-visacat.yecai$Number),]
visacat.yecai$cumsum <- cumsum(visacat.yecai$Number)
visacat.yecai$cumPercent <- 100* visacat.yecai$cumsum/sum(visacat.yecai$Number)
visacat.yecai <- rename(visacat.yecai, c(cumsum="Cumulative total", cumPercent="Cumulative percent"))
@

<<'Yecai visa table'>>=
cols.comma = c(2,4)  # identify columns that need commas for thousands
visacat.yecai[, cols.comma] = prettyNum( visacat.yecai[, cols.comma], big.mark=",", drop0trailing = TRUE)
print(xtable(visacat.yecai, caption="Status adjustment applicants based on Yecai's visa classification", digits=c(0,0,0,2,0,2), align=c('l', 'l', 'r','r','r','r')), include.rownames=FALSE)
@

And graphically...
<<'Yecai visa categories', fig.height=6, fig.width=15, fig.align='center',fig.cap="Non-immigrant applicants for status adjustment, by Yecai's visa classification">>=
##Yecai's visatypes
visacollapse.yecai <- as.data.frame(table(droplevels(ni.main)$visacat.yecai)) #This takes the table command and converts the output into a dataframe which can then be analyzed
require(reshape)
visacollapse.yecai <- rename(visacollapse.yecai, c(Var1="visa"))

###Pre-graphing code for ordering the visa types by frequency and not their numeric code 
visacollapse.yecai_reorder <- transform(visacollapse.yecai, visa=reorder(visa, Freq)) #makes graph appear with visa types from low to high freq

###This keep the visa type on the x-axis
require(ggplot2)
pvisatype <- ggplot(data=visacollapse.yecai_reorder, aes(x=visa, y=Freq)) + geom_bar(colour="grey", width=.3) + 
  xlab("Visa Type") + ylab("Frequency") 

###This flips the coordinates (coord_flip) 
require(scales)
pvisatype + geom_bar(colour="grey", width=.5) + coord_flip() + scale_y_continuous(labels=comma, breaks=c(25000, 100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000))
@

\newpage
\section{TB classification}
Using WHO's TB incidence data over the last 20 years, we classified countries into high TB incidence ($>$100/100,000), medium TB incidence (20-100/100,000) and low TB incidence ($<$20/100,000).  Table 5 presents the number of status adjustment applicants by their country of birth, geographical region and WHO TB burden of their birth country.

<<'TB classification'>>=
#create a variable for TB burden using WHO classification and Yecai's classification
#WHO classification
#This classification was derived from WHO data in TB incidence rate/100,000 (see the tbwho.Rmd document)
ni.main <- within(ni.main, {
  tbburden <- NA
  tbburden[COB=="Canada" | COB=="Cuba" | COB=="France" | COB=="Germany" | COB=="Israel" | COB=="Jamaica" | COB=="UK" | COB=="Trinidad"] <- "low (TB incidence<20/100,000)"
  tbburden[COB=="Argentina" | COB=="Brazil" | COB=="Colombia" | COB=="El Salvador" | COB=="Guatemala" | COB=="Japan" | COB=="Mexico" | COB=="Poland"
           | COB=="S Korea" | COB=="Ukraine" | COB=="Venezuela" | COB=="Iran"] <- "medium (TB incidence 20-100/100,000)"
  tbburden[COB=="China" | COB=="India" | COB=="Philippines" 
           | COB=="Haiti" | COB=="Peru" | COB=="Dom Republic"
           | COB=="Pakistan" | COB=="Viet Nam" | COB=="Ecuador"
           | COB=="Nigeria" | COB=="Ethiopia" | COB=="Russia" | COB=="Ghana" | COB=="Thailand"
           | COB=="Romania" | COB=="Honduras" | COB=="Kenya"] <- "high (TB incidence>100/100,000)"
})
ni.main$tbburden <- factor(ni.main$tbburden, c("high (TB incidence>100/100,000)", "medium (TB incidence 20-100/100,000)", "low (TB incidence<20/100,000)"), levels=c("high (TB incidence>100/100,000)", "medium (TB incidence 20-100/100,000)", "low (TB incidence<20/100,000)"))
@

<<'Yecai TB classification'>>=
#this was taken from Liu, Y. PLoS One 2012
ni.main <- within(ni.main, {
  tbburden.yecai <- NA
  tbburden.yecai[COB=="Canada" | COB=="Cuba" | COB=="France" | COB=="Germany" | COB=="Israel" | COB=="Jamaica" | COB=="UK"] <- "low (TB incidence<14/100,000)"
  tbburden.yecai[COB=="Argentina" | COB=="Brazil" | COB=="Colombia" | COB=="El Salvador" | COB=="Guatemala" | COB=="Japan" | COB=="Mexico" | COB=="Poland"
                 | COB=="S Korea" | COB=="Ukraine" | COB=="Venezuela" | COB=="Iran" | COB=="Trinidad"] <- "medium (TB incidence 15-99/100,000)"
  tbburden.yecai[COB=="China" | COB=="India" | COB=="Philippines" 
                 | COB=="Haiti" | COB=="Peru" | COB=="Dom Republic"
                 | COB=="Pakistan" | COB=="Vietnam" | COB=="Ecuador"
                 | COB=="Nigeria" | COB=="Ethiopia" | COB=="Russia" | COB=="Ghana" | COB=="Thailand"
                 | COB=="Romania" | COB=="Honduras" | COB=="Kenya"] <- "high (TB incidence>100/100,000)"
})

ni.main$tbburden.yecai <- factor(ni.main$tbburden.yecai, c("high (TB incidence>100/100,000)", "medium (TB incidence 15-99/100,000)", "low (TB incidence<14/100,000)"), levels=c("high (TB incidence>100/100,000)", "medium (TB incidence 15-99/100,000)", "low (TB incidence<14/100,000)"))
@

<<'TB burden collapse'>>=
collapse2 <- summaryBy(COB ~ tbburden, FUN=length, data=ni.main)
require(reshape)
collapse2 <- rename(collapse2, c(tbburden="TB burden", COB.length="Number"))
collapse2$Percent <- 100* collapse2$Number/sum(collapse2$Number)
collapse2 <- collapse2[order(-collapse2$Number),]
collapse2$cumsum <- cumsum(collapse2$Number)
collapse2$cumPercent <- 100* collapse2$cumsum/sum(collapse2$Number)
collapse2 <- rename(collapse2, c(cumsum="Cumulative total", cumPercent="Cumulative percent"))
@

<<'TB burden table'>>=
cols.comma = c(2,4)  # identify columns that need commas for thousands
collapse2[, cols.comma] = prettyNum( collapse2[, cols.comma], big.mark=",", drop0trailing = TRUE)
print(xtable(collapse2, caption="Status adjustment applicants by TB burden", digits=c(0,0,0,2,0,2), align=c('l', 'l', 'r','r','r','r')), include.rownames=FALSE)
@

<<'TB burden details collapse'>>=
collapse2 <- summaryBy(COB ~ tbburden + region + COB, FUN=length, data=ni.main)
collapse2 <- rename(collapse2, c(tbburden="TB burden", region="Region", COB="Country of birth", COB.length="Number"))
@

<<'TB burden details table'>>=
cols.comma = c(4)  # identify columns that need commas for thousands
collapse2[, cols.comma] = prettyNum( collapse2[, cols.comma], big.mark=",", drop0trailing = TRUE)
print(xtable(collapse2, caption="Number of status adjustment applicants by TB burden, region and country of birth"), include.rownames=FALSE)
@

\newpage
Figure 4 shows the number of status adjustment applicants by their country of birth, stratified by TB burden.
<<'COB and TB burden',fig.height=6,fig.width=15,fig.align='center',fig.cap="Country of birth of non-immigrant applicants for status adjustment, by TB burden",eval=FALSE>>=
require(ggplot2)
library(scales)
#Aggregate over COB and tbburden
aggdata <- aggregate(ni.main, by=list(ni.main$COB, ni.main$tbburden), FUN=length)
keepvars <- names(aggdata) %in% c("Group.1", "Group.2", "COB")
aggdata <- aggdata[keepvars]
###Rename variables
require(reshape)
aggdata <- rename(aggdata, c(Group.1="cob", Group.2="tbburden", COB="Freq"))
###Code to make the graph look ordered by frequency and not alphabetical order of country of birth (cob)
cob_order <- transform(aggdata, cob=reorder(cob, Freq)) #Countries appreas from low to high frequency
#this plot will contain cob on x-axis
p <- ggplot(data=cob_order, aes(x=cob, y=Freq)) + geom_bar(colour="grey", width=.8) + 
  xlab("Country of birth") + ylab("Frequency") 

#this plot will flip the axes and show cob on y-axis (easier to read)
#p + geom_bar() + coord_flip() + scale_y_continuous(labels=comma, limits=c(0,600000)) #this gives range of y axis (0 - 600000)
#p + geom_bar() + coord_flip() + scale_y_continuous(labels=comma, breaks=c(20000, 100000, 200000, 300000, 400000, 500000, 600000))

p + geom_bar() + theme_bw() + coord_flip() +
  scale_y_continuous(labels=comma, breaks=c(20000, 100000, 200000, 300000, 400000, 500000, 600000)) +
  facet_wrap(~ tbburden, ncol=3, scales="free") 
@
\FloatBarrier

<<'subsets by TB burden'>>=
hightb <- subset(ni.main, tbburden=="high (TB incidence>100/100,000)", drop=TRUE) 
hightb$tbburden <- factor(hightb$tbburden)
hightb$COB <- factor(hightb$COB)

mediumtb <- subset(ni.main, tbburden=="medium (TB incidence 20-100/100,000)", drop=TRUE) 
mediumtb$tbburden <- factor(mediumtb$tbburden)
mediumtb$COB <- factor(mediumtb$COB)

lowtb <- subset(ni.main, tbburden=="low (TB incidence<20/100,000)", drop=TRUE) 
lowtb$tbburden <- factor(lowtb$tbburden)
lowtb$COB <- factor(lowtb$COB)
@

<<'Generating individual plots-by TB'>>=
#high tb
aggdata.hightb <- aggregate(hightb, by=list(hightb$COB), FUN=length)
keepvars <- names(aggdata.hightb) %in% c("Group.1", "COB")
aggdata.hightb <- aggdata.hightb[keepvars]
aggdata.hightb <- rename(aggdata.hightb, c(Group.1="cob", COB="Freq"))
###Code to make the graph look ordered by frequency and not alphabetical order of country of birth (cob)
cob_order <- transform(aggdata.hightb, cob=reorder(cob, Freq)) #Countries appreas from low to high frequency
#this plot will contain cob on x-axis


p <- ggplot(data=cob_order, aes(x=cob, y=Freq)) + geom_bar(colour="light grey", width=.8) + 
  ylab("Frequency") + opts(axis.title.y = theme_blank()) +
  scale_y_continuous(limits=c(0,600000), labels=comma, breaks=c(20000, 100000, 200000, 300000, 400000, 500000, 600000)) +
  opts(title="High TB incidence")
p.hightb <- p + coord_flip()  

#medium tb
aggdata.medtb <- aggregate(mediumtb, by=list(mediumtb$COB), FUN=length)
keepvars <- names(aggdata.medtb) %in% c("Group.1", "COB")
aggdata.medtb <- aggdata.medtb[keepvars]
aggdata.medtb <- rename(aggdata.medtb, c(Group.1="cob", COB="Freq"))
###Code to make the graph look ordered by frequency and not alphabetical order of country of birth (cob)
cob_order <- transform(aggdata.medtb, cob=reorder(cob, Freq)) #Countries appreas from low to high frequency
#this plot will contain cob on x-axis

p <- ggplot(data=cob_order, aes(x=cob, y=Freq)) + geom_bar(colour="light grey", width=.8) + 
  ylab("Frequency") + opts(axis.title.y = theme_blank()) +
  scale_y_continuous(limits=c(0,600000), labels=comma, breaks=c(20000, 100000, 200000, 300000, 400000, 500000, 600000)) +
  opts(title="Medium TB incidence")
p.medtb <- p + coord_flip()

#low tb
aggdata.lowtb <- aggregate(lowtb, by=list(lowtb$COB), FUN=length)
keepvars <- names(aggdata.lowtb) %in% c("Group.1", "COB")
aggdata.lowtb <- aggdata.lowtb[keepvars]
aggdata.lowtb <- rename(aggdata.lowtb, c(Group.1="cob", COB="Freq"))
###Code to make the graph look ordered by frequency and not alphabetical order of country of birth (cob)
cob_order <- transform(aggdata.lowtb, cob=reorder(cob, Freq)) #Countries appreas from low to high frequency
#this plot will contain cob on x-axis

p <- ggplot(data=cob_order, aes(x=cob, y=Freq)) + geom_bar(colour="light grey", width=.8) + 
  ylab("Frequency") + opts(axis.title.y = theme_blank()) +
  scale_y_continuous(limits=c(0,600000), labels=comma, breaks=c(20000, 100000, 200000, 300000, 400000, 500000, 600000)) +
  opts(title="Low TB incidence")
p.lowtb <- p + coord_flip()
@

<<'Generating combined plot-by TB',fig.height=6,fig.width=20,fig.align='center',fig.cap="Country of birth of non-immigrant applicants for status adjustment, by TB burden">>=
require(gridExtra)
grid.arrange(p.hightb, p.medtb, p.lowtb, nrow=1, ncol=3, main=textGrob("Status adjustment applicants, by TB burden of their country of birth"), left=textGrob("Country of birth", rot=90))
@
\FloatBarrier

\newpage
\subsection{Yecai's TB classification}
In addition to the WHO TB classification, we used the classification developed by Yecai for his PLoS One paper, as follows: high TB incidence ($>$100/100,000), medium TB incidence (15-100/100,000) and low TB incidence ($<$15/100,000).  Figure 5 shows the countries of birth of status adjusters according to Yecai's TB classification.  
<<'COB and Yecai TB burden',fig.height=6,fig.width=15,fig.align='center',fig.cap="Country of birth of non-immigrant applicants for status adjustment, by TB burden (Yecai classification)">>=
library(ggplot2)
library(scales)
#Aggregate over COB and tbburden.yecai
aggdata.yecai <- aggregate(ni.main, by=list(ni.main$COB, ni.main$tbburden.yecai), FUN=length)
keepvars <- names(aggdata.yecai) %in% c("Group.1", "Group.2", "COB")
aggdata.yecai <- aggdata.yecai[keepvars]
###Rename variables
require(reshape)
aggdata.yecai <- rename(aggdata.yecai, c(Group.1="cob", Group.2="tbburden.yecai", COB="Freq"))
###Code to make the graph look ordered by frequency and not alphabetical order of country of birth (cob)
cob_order <- transform(aggdata.yecai, cob=reorder(cob, Freq)) #Countries appreas from low to high frequency
#this plot will contain cob on x-axis
p <- ggplot(data=cob_order, aes(x=cob, y=Freq)) + geom_bar(colour="grey", width=.8) + 
  xlab("Country of birth") + ylab("Frequency") 

p + geom_bar() + theme_bw() + coord_flip() +
  scale_y_continuous(labels=comma, breaks=c(20000, 100000, 200000, 300000, 400000, 500000, 600000)) +
  facet_wrap(~ tbburden.yecai, ncol=3, scales="free") 
@

<<'save data'>>=
ni.main$status <- 1
save(ni.main, file="ni.main.Rda")
@

\end{document}
